pipeline {
    agent any
    tools {
        git "Default"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
        timestamps()
        skipDefaultCheckout()
        disableResume()
        ansiColor('xterm')
    }
    
    triggers {
        pollSCM('H/2 * * * *') // Adjust polling if necessary
    }
    
    environment {
        DEPLOY_CONFIGS = """{
            "dev": {"profile": "develop", "playbook": "/opt/jenkins/playbook/las/las_dev_tomcat.yml", "script": "/opt/scripts/deploy_dev.sh"},
            "uat": {"profile": "uat", "playbook": "/opt/jenkins/playbook/las/las_uat_tomcat.yml", "script": "/opt/scripts/deploy_uat.sh"},
            "main": {"profile": "main", "playbook": "/opt/jenkins/playbook/las/las_Prod_tomcat.yml", "script": "/opt/scripts/deploy_prod.sh"}
        }"""
    }
    
    stages {
        stage("Checkout Code") {
            when {
                expression { env.BRANCH_NAME in ['dev', 'uat', 'main'] }
            }
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${env.BRANCH_NAME}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/jksonar/plane_html_index.git'
                    ]]
                ])
            }
        }
        
        stage("Build and Deploy") {
            when {
                expression { env.BRANCH_NAME in ['dev', 'uat', 'main'] }
            }
            steps {
                script {
                    def deployConfigs = readJSON(text: env.DEPLOY_CONFIGS)
                    def branchConfig = deployConfigs[env.BRANCH_NAME]
                    
                    if (!branchConfig) {
                        error "No deployment configuration found for branch: ${env.BRANCH_NAME}"
                    }

                    def buildProfile = branchConfig.profile
                    def playbook = branchConfig.playbook
                    def deployScript = branchConfig.script
                    
                    ansiColor('css') {
                        sh "${deployScript} ${buildProfile} ${playbook} ${env.WORKSPACE}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
