pipeline {
    agent any
    tools {
        git "Default"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
        timestamps()
        skipDefaultCheckout()
        disableResume()
        ansiColor('xterm')
    }
    
    triggers {
        pollSCM('H/2 * * * *') 
    }

    parameters {
        choice(name: 'ENV', choices: ['dev', 'main', 'uat', 'prod'], description: 'Select deployment environment')
    }
    
    environment {
        DEPLOYMENT_ENV = "${params.ENV}"
        APP_NAME = "my-app"
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Building for environment: ${DEPLOYMENT_ENV}"
                    switch (DEPLOYMENT_ENV) {
                        case 'dev':
                            env.BRANCH_NAME = 'dev'
                            env.DEPLOY_URL = 'http://dev.example.com'
                            break
                        case 'main':
                            env.BRANCH_NAME = 'main'
                            env.DEPLOY_URL = 'http://main.example.com'
                            break
                        case 'uat':
                            env.BRANCH_NAME = 'uat'
                            env.DEPLOY_URL = 'http://uat.example.com'
                            break
                        case 'prod':
                            env.BRANCH_NAME = 'main'
                            env.DEPLOY_URL = 'http://prod.example.com'
                            break
                    }
                }
            }
        }
        stage("Checkout Code") {
            when {
                expression { env.BRANCH_NAME in ['dev', 'uat', 'main'] }
            }
            steps {
                echo "Checking out branch: ${BRANCH_NAME}"
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${env.BRANCH_NAME}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/jksonar/plane_html_index.git'
                    ]]
                ])
            }
        }
        
        stage("Build and Deploy") {
            when {
                expression { env.BRANCH_NAME in ['dev', 'uat', 'main'] }
            }
            steps {
                script {
                    echo "Deploying ${APP_NAME} to ${DEPLOYMENT_ENV} at ${DEPLOY_URL}"
                }
            }
        }
    }
    
    post {
        success {
            echo "Deployment to ${DEPLOYMENT_ENV} successful!"
        }
        failure {
            echo "Deployment failed for ${DEPLOYMENT_ENV}"
        }
        always {
            cleanWs()
        }
    }
}
